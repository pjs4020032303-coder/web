/*!
 * project : websocket
 * author : LINOFFICE
 * 웹소켓
 */ let ws_handler;class WebSocketHandler{ws=null;url=null;callback=null;reconnect_max_count=10;constructor(s,t){if(!s||!s.is_enable||ws_handler||!t)return!1;this.url="ingame"===device?s.ingame_url:s.url,this.callback=t}connect(){if(!this.url){console.log("disable websocket");return}if(this.is_open()){console.log(`already open : state(${this.ws.readyState})`);return}this.ws=new WebSocket(this.url),this.ws.onopen=s=>{this.callback.on_open(s)},this.ws.onmessage=s=>{this.callback.on_message(s)},this.ws.onclose=s=>{this.callback.on_close(s),s.wasClean||this.reconnect()},this.ws.onerror=s=>{console.log(s)}}reconnect(){!(--this.reconnect_max_count<0)&&setTimeout(()=>{this.connect()},1e3)}close(){this.ws&&(this.ws.close(),this.ws=null)}is_connecting(){return this.ws&&this.ws.readyState==WebSocket.CONNECTING}is_open(){return this.ws&&this.ws.readyState==WebSocket.OPEN}is_closing(){return this.ws&&this.ws.readyState==WebSocket.CLOSING}is_closed(){return this.ws&&this.ws.readyState==WebSocket.CLOSED}send(s,t){account&&this.is_open()&&this.ws.send(s+JSON.stringify(t))}}